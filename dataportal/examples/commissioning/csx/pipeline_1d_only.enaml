from enaml.layout.api import (InsertItem, VSplitLayout, HSplitLayout,
                              InsertDockBarItem)
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (Window, Container, DockItem, DockArea,
                               MainWindow, ObjectCombo, PushButton)
from replay.gui.line_view import LineView
from replay.gui.scalar_view import ScalarView, ScalarController
from replay.gui.cross_section_view import (CrossSectionView,
                                           CrossSectionController)

from enaml.stdlib.dock_area_styles import available_styles

def cap_case(name):
    return ' '.join(s.capitalize() for s in name.split('-'))

def add_dock_bars(area, cross_section_view, cross_section_controller,
           scalar_view, scalar_controller):
    area.update_layout(InsertDockBarItem(item=cross_section_view,
                                         target=cross_section_controller))
    area.update_layout(InsertDockBarItem(item=scalar_view,
                                         target=scalar_controller))


enamldef PipelineView(MainWindow): main:
    title = "Live Data Demo"
    attr scalar_collection
    attr multi_fit_controller
    attr clear_data
    attr start_observation
    attr stop_observation
    Container: container:
        ObjectCombo: style_c:
            items = available_styles()
            to_string = cap_case
            selected = 'vs-2010'
        DockArea: area:
            style << style_c.selected
            layout = HSplitLayout(VSplitLayout('trigger pvs', 'scalar controller'),
                                  VSplitLayout('scalar view')
            )
            DockItem: scalar_view:
                name = 'scalar view'
                title = 'Scalar View'
                closable = False
                Container:
                    ScalarView:
                        fitter.multi_fit_controller = main.multi_fit_controller
                        pass
            DockItem: scalar_controller:
                name = 'scalar controller'
                title = 'Scalar Controller'
                closable = False
                Container:
                    hug_width = 'strong'
                    ScalarController:
                        pass
            DockItem: triggers:
                name = 'trigger pvs'
                title = 'Trigger PVs'
                Container:
                    hug_width = 'strong'
                    PushButton: btn_start:
                        text = "Start"
                        clicked ::start_observation()
                    PushButton: btn_stop:
                        text = "Stop"
                        clicked :: stop_observation()
                    PushButton: btn_clear:
                        text = "Clear"
                        clicked :: clear_data()
